* Packages
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives
	       '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives
	       '("org" . "https://orgmode.org/elpa/") t)
  (package-initialize)
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (defvar my-packages '(;; Put packages here...
			ir-black-theme
			auto-complete
			geiser
			magit
			bongo
			volume
			elfeed
			elfeed-org
			helm 
			helm-pass
			helm-books
			paredit
			dictionary
			org-bullets
			lsp-mode
			company
			lsp-treemacs
			cider
			clojure-mode
			flycheck
			pdf-tools
			graphviz-dot-mode
			org-mind-map
			no-littering
			fancy-battery
			exwm
			))
  (dolist (p my-packages)
    (when (not (package-installed-p p))
      (package-install p)))
  (require 'no-littering) ;; keeps .emacs.d clean
#+END_SRC
* General
** Default programs
-Browser
#+begin_src emacs-lisp
  (setq browse-url-browser-function 'eww-browse-url)
#+end_src
** Eshell
#+begin_src emacs-lisp


  
#+end_src
* Bindings
- helm-google
  #+begin_src emacs-lisp
    (global-set-key (kbd "C-h C--") 'helm-google)
  #+end_src
* Modes
** Auto-complete mode
#+begin_src emacs-lisp
  (require 'auto-complete)
  (add-hook 'org-mode-hook 'auto-complete-mode)
  (global-auto-complete-mode t)
#+end_src
** Flycheck
#+begin_src emacs-lisp
  (require 'flycheck)
  (flycheck-mode t)
  (add-hook 'org-mode-hook 'flycheck-mode)
  (add-hook 'clojure-mode-hook 'flycheck-mode)
  (add-hook 'clojurescript-mode-hook 'flycheck-mode)
  (add-hook 'clojurec-mode-hook 'flycheck-mode)
  (add-hook 'scheme-mode-hook 'flycheck-mode)

#+end_src
** Paredit mode
#+begin_src emacs-lisp
  (require 'paredit)
  (paredit-mode t)
  ;; hooks
  (add-hook 'org-mode-hook 'paredit-mode)
  (add-hook 'clojure-mode-hook 'paredit-mode)
  (add-hook 'clojurescript-mode-hook 'paredit-mode)
  (add-hook 'clojurec-mode-hook 'paredit-mode)
  (add-hook 'scheme-mode-hook 'paredit-mode)
#+end_src
** Lsp
#+begin_src emacs-lisp
  (add-hook 'clojure-mode-hook 'lsp)
  (add-hook 'clojurescript-mode-hook 'lsp)
  (add-hook 'clojurec-mode-hook 'lsp)
  (require 'lsp-java)
  (add-hook 'java-mode-hook 'lsp)
#+end_src
** Company
#+begin_src emacs-lisp
  (setq company-minimum-prefix-length 1
	company-idle-delay 0.0)
#+end_src
** Pdf tools
#+begin_src emacs-lisp

  (pdf-tools-install)
  (add-hook 'pdf-view-mode 'pdf-view-midnight-minor-mode)
   
#+end_src
** Just activation
#+begin_src emacs-lisp

  ;; clock
  (display-time-mode)
  (setq display-time-day-and-date 1)
  ;; Highlight matching parantheses
  (show-paren-mode 1)

#+end_src
* Elfeed
#+begin_src emacs-lisp

  ;; Load elfeed-org
  (require 'elfeed-org)

  ;; Initialize elfeed-org
  ;; This hooks up elfeed-org to read the configuration when elfeed
  ;; is started with =M-x elfeed=
  (elfeed-org)

  ;; Elfeed source
  (setq
   rmh-elfeed-org-files
   (list "~/.emacs.d/elfeed.org"))

#+end_src
* Helm 
* Aspect
** Bars on/off
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-startup-screen t)
#+END_SRC
** Battery
#+begin_src emacs-lisp

  (fancy-battery-mode)
  (setq fancy-battery-show-percentage 1)

#+end_src
** Theme
#+begin_src emacs-lisp
  ;; Set custom theme path
  (setq custom-theme-directory
	(concat user-emacs-directory "themes"))
  (dolist
      (path
       (directory-files custom-theme-directory t "\\w+"))
    (when (file-directory-p path)
      (add-to-list 'custom-theme-load-path path)))

  ;; Theme load
  (load-theme 'gbrl-black t)
#+end_src
** Font
#+begin_src emacs-lisp
  (set-face-attribute
   'default nil
   :font "DeJaVu Sans Mono-20")
#+end_src
* LaTeX
#+begin_src emacs-lisp

  

#+end_src
* Org
#+begin_src emacs-lisp

  (require 'org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

  ;; Org Babel Languages
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (dot . t)))

  ;; Graphviz images displaying
  (defun my/fix-inline-images ()
    (when org-inline-image-overlays
      (org-redisplay-inline-images)))

  (add-hook 'org-babel-after-execute-hook 'my/fix-inline-images)

  ;; Org Mind Map
  ;; This is an Emacs package that creates graphviz directed graphs from
  ;; the headings of an org file
  (use-package org-mind-map
    :init
    (require 'ox-org)
    :ensure t
    ;; Uncomment the below if 'ensure-system-packages` is installed
    ;;:ensure-system-package (gvgen . graphviz)
    :config
    (setq org-mind-map-engine "dot")       ; Default. Directed Graph
    ;; (setq org-mind-map-engine "neato")  ; Undirected Spring Graph
    ;; (setq org-mind-map-engine "twopi")  ; Radial Layout
    ;; (setq org-mind-map-engine "fdp")    ; Undirected Spring Force-Directed
    ;; (setq org-mind-map-engine "sfdp")   ; Multiscale version of fdp for the layout of large graphs
    ;; (setq org-mind-map-engine "twopi")  ; Radial layouts
    ;; (setq org-mind-map-engine "circo")  ; Circular Layout
    )

#+end_src
* EXWM
#+begin_src emacs-lisp

  (require 'exwm-systemtray)
  (exwm-systemtray-enable)
  (require 'exwm)
  (exwm-enable)
  ;;(require 'exwm-config)
  ;;(exwm-config-default)

#+end_src
* Experimental
#+begin_src emacs-lisp

  

#+end_src
